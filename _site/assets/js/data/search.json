[
  
  {
    "title": "Chirpy 테마 포스트 작성법",
    "url": "/posts/chirpy-%ED%85%8C%EB%A7%88-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1%EB%B2%95/",
    "categories": "Blogging, jekyll",
    "tags": "jekyll, chirpy, markdown",
    "date": "2023-01-23 21:07:00 +0900",
    





    
    "snippet": "이 블로그의 첫 번째 포스트로 jekyll의 Chirpy 템플릿(현 블로그의 테마)에 포스트를 작성하는 방법을 업로드 하기로 했다. 이 테마의 demo page에 가면 있는 포스트의 번역판이라고 봐도 무방하며, 필요 없어 보이는 부분은 제외하고 좀 더 필요하다 싶은 부분은 추가하였다.문서 작성은 markdown 형식으로 하면 되며, 이 블로그 repo...",
    "content": "이 블로그의 첫 번째 포스트로 jekyll의 Chirpy 템플릿(현 블로그의 테마)에 포스트를 작성하는 방법을 업로드 하기로 했다. 이 테마의 demo page에 가면 있는 포스트의 번역판이라고 봐도 무방하며, 필요 없어 보이는 부분은 제외하고 좀 더 필요하다 싶은 부분은 추가하였다.문서 작성은 markdown 형식으로 하면 되며, 이 블로그 repo/_posts 디렉토리의 Chirpy 테마 포스트 작성법 markdown 파일을 참고하기 바란다. 기회가 된다면(= 작성자가 마음이 내키면) 이후 markdown 문법을 정리하여 업로드 할 예정이다.파일명과 경로파일 명은 YYYY-MM-DD-TITLE.md이며, _posts 디렉토리에 생성해야 한다. 파일의 제일 윗부분에 table 형식의 머리말을 입력해야 하는데, 사실 많이 귀찮다(…). 다행이 어느정도 자동화를 할 수 있는 방법이 있다. 해당 부분은 Jekyll-Compose를 참고하시길. 해당 플러그인을 활용하면 git 워크트리에서 bundle exec jekyll post \"포스트 제목\" 명령어로 포스트를 간편(?)하게 생성할 수 있으며 categories, tags 정도만 추가해주면 된다.머리말 (Front Matter)앞서 언급했듯 글의 맨 위에 글 정보에 대한 머리말을 달아야 한다. 형식은 다음과 같다.---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTT # 한국 표준시는 +0900로 하면 된다. (그냥 compose 플러그인을 활용하자)categories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG는 항상 소문자임에 주의---  compose 플러그인을 사용하면 자동으로 layout이 머리말에 입력되는데, 사실 layout 은 기본적으로 post 로 설정되므로 필요가 없다.시간대_config.yml에 timezone 설정을 했지만 글 작성 시간을 정확히 나타내기 위해서는 머리말에도 표시해 주어야 한다. (이유는 잘 모른다.) 형식은 +/-TTTT 이며 앞서 말했듯 한국 표준시는 +0900으로 작성하면 된다.Categories 와 Tags각 포스트의 categories에는 두 개의 요소가 들어가고 , tags 에는 0개부터 개수 제한 없이 추가할 수 있다.---categories: [프로그래밍언어, HTML]tags: [ㅈㅅ]---Author 정보저자 정보는 config 파일의 social.name과 social.links의 첫 엔트리에서 자동으로 가져오므로 굳이 Front Matter 에 작성할 필요는 없다. 하지만 다음과 같은 방법으로 덮어쓸 수도 있으니 참고:_data/authors.yml 파일에 저자 정보를 입력하면 된다. (만약 이 파일이 없다면 하나 만들어라).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;그 후 author혹은 authors를 쓰면 된다.---author: &lt;author_id&gt; # 단일엔트리# 혹은authors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # 다중엔트리---  _data/authors.yml 파일에서 저자 정보를 읽어오는 것의 장점은 SEO에 좋은 twitter meta tag를 가진다는 건데… 난 트위터를 쓰지 않으므로 넘어가겠다.컨텐츠 목록포스트 오른쪽 패널에 자동으로 컨텐츠 목록(Table of Contents/TOC)이 생성된다. 전역으로 없애고 싶으면 _config.yml 파일의 toc 변수를 false로 바꾸면 된다. 특정 포스트에서만 없애고 싶다면 Front Matter에 다음 부분을 추가하면 된다:---toc: false---댓글댓글창의 전역 스위치는 _config.yml 파일의 comments.active이다. 댓글 툴을 선택하면 되는데, 이 블로그는 giscus를 활용했다. (comment.active에 “giscus”라고 입력해주면 됨) giscus 공식 문서에서 discussion 연결 방식을 경로로 하고, 카테고리는 Announcement, 기능은 메인 포스트에 반응 남기기와 댓글 위에 댓글 상자 배치를 선택해주면 script가 만들어진다. 이 script에서 필요한 부분을 _config.yml에 입력해주면 댓글창이 만들어진다.마찬가지로 특정 포스트에서만 기능을 해제하고 싶다면 Front Matter 에 다음을 추가한다:---comments: false---수식수식을 사용하면 속도가 느려서 자동으로 설정되지는 않는다. 활성화는 다음과 같이 할 수 있다:---math: true---MermaidMermaid는 도식 생성 툴이다. 활성화하려면 다음 yaml 블록을 추가하면 된다:---mermaid: true---다른 마크다운 문서와 같이 graph 코드를 ` mermaid ` 와 ` ` 로 감싸면 된다.이미지캡션이미지 삽입 다음 줄에 이탤릭체로 글을 쓰면 이미지 아래 캡션으로 달린다:![img-description](/path/to/image)_Image Caption_크기이미지가 로드된 다음 문서 콘텐츠 레이아웃이 바뀌는 것을 예방하기 위해 각 이미지에 너비와 높이를 지정해준다:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Chirpy v5.0.0 부터 height 와 width 을 줄임말로 쓸 수 있다. (height → h, width → w). 아래와 같이 쓸 수 있으며, 쪼금 덜 귀찮아졌다:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }위치이미지는 자동으로 가운데 정렬이 되지만, normal, left, right으로 정렬할 수 있다.  위치가 특정되면 이미지 캡션은 추가되선 안된다.      Normal position    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      다크/라이트 모드이미지가 다크/라이트 모드 테마를 따르게 할 수 있다. 다크모드, 라이트모드용 이미지를 각각 준비하여 따로 지정해 주면 된다 (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }그림자프로그램 창의 스크린샷은 그림자 효과가 나타나게 설정할 수 있다(뭔소린지 잘 모르겠다):![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URL이미지을 CDN에 호스트 한다면 _config.yml 파일의 img_cdn변수에 CDN URL을 할당함으로써 URL을 계속 써줘야하는 시간을 절약할 수 있다:img_cdn: https://cdn.comimg_cdn 이 할당되면, 모든 이미지(사이트 아바타와 포스트의 이미지)의 경로에 /로 시작하는 CDN URL이 추가된다.예를 들어, 다음과 같이 이미지를 사용할때:![The flower](/path/to/flower.png)파싱 결과로 이미지 경로 앞에 https://cdn.com이 다음과 같이 붙는다:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\" /&gt;이미지 경로포스트에 사진이 많다면 이미지 경로를 반복적으로 지정하는 것은 시간낭비다. 포스트의 YAML 블록에 다음과 같이 이미지 경로를 추가하면:---img_path: /img/path/---마크다운 문서에서 이미지 파일 명을 그대로 쓸 수 있어 시간을 절약할 수 있다:![The flower](flower.png)파싱 결과는 다음과 같다:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\" /&gt;미리보기 이미지포스트 최상단에 이미지를 추가하고 싶다면, 1200 x 630 해상도의 이미지를 추가해야 한다. 1.91 : 1 비율이 아니라면 이미지가 잘리게 된다.이 점만 주의하고 이미지 속성을 다음과 같이 설정하면 된다:---image:  path: /path/to/image  alt: image alternative text---img_path는 미리보기 이미지에도 적용될 수 있어서 이와 같이 설정하면 마찬가지로 이미지 파일명만 쓰면 된다.경로 설정은 그냥 간단히 image 만 써도 되긴 하다.---image: /path/to/image---LQIP (Low Quality Image Placeholder)로딩이 느릴때 저해상도의 이미지를 먼저 보여주어 로딩이 됨에 따라 해상도가 점점 높아지는 것 처럼 설정 할 수 있다.미리보기 이미지에 설정할 때:---image:  lqip: /path/to/lqip-file # or base64 URI---  미리보기 이미지에 적용된 예시는 이 블로그 테마 원본 블로그의 Text and Typography 문서에서 볼 수 있다.일반 이미지에 설정할 때:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }포스트 고정홈페이지 최상단에 포스트를 고정할 수 있다. 여러개가 고정되어 있는 경우 작성일 역순으로 정렬된다. 다음과 같이 활성화 할 수 있다:---pin: true---프롬프트몇가지 프롬프트가 있다: tip, info, warning, danger. blockquote에 prompt-{type}을 추가하여 생성할 수 있다. 예를들어 info 프롬프트는 다음과 같이 생성할 수 있다:&gt; Example line for prompt.&gt; {: .prompt-info }Syntax인라인 코드`inline code part`파일 경로 강조`/path/to/a/file.extend`{: .filepath}코드 블록` ``` ` 를 붙이면 간단히 코드 블록을 생성할 수 있다:```This is a plaintext code snippet.```언어 명시` ```{language} ` 를 쓰면 syntax highlight이 된다:```yamlkey: value```  Jekyll 태그인 {% highlight %}는 이 테마에서 사용할 수 없다.줄 번호plaintext, console, terminal 을 제외한 모든 언어는 자동으로 줄 번호가 보인다. 줄 번호를 보이기 싫다면 nolineno 클래스를 붙이자:```shellecho 'No more line numbers!'```{: .nolineno }파일 이름 특정코드블록 상단을 잘 보면 파일 이름이 해당 파일이 구성된 언어 이름으로 되어있다. 특정 파일명으로 바꾸고 싶다면 file속성을 추가하면 된다:```shell# content```{: file=\"path/to/file\" }Liquid CodesLiquid snippet을 사용하고 싶다면, 코드를 {% raw %} 와 {% endraw %}로 감싸자:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}혹은 Jekyll 4.0 이상 버전에서는 포스트의 YAML 블록에 render_with_liquid: false를 추가하면 된다.영상다음 syntax로 영상을 삽입할 수 있다:{% include embed/{Platform}.html id='{ID}' %}Platform 은 플랫폼 이름의 소문자형이고, ID 는 영상의 ID이다.다음 표에서 지원하는 플랫폼이 무엇인지, 그리고 각 플랫폼 URL에서 어떻게 두 매개변수를 찾을 수 있는지를 알 수 있다.            영상 URL      플랫폼      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211      그 외이 테마는 Jekyll 기반이므로 Jekyll Docs: Posts를 확인하면 더 자세한 사항을 알 수 있다."
  }
  
]

